name: Render README preview

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

jobs:
  generate-preview:
    name: Generate README preview
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Render README to PNG
        run: go run . -in README.md -out output.png

      - name: Upload README preview artifact
        uses: actions/upload-artifact@v4
        with:
          name: readme-preview-${{ github.sha }}
          path: output.png
          if-no-files-found: error

      - name: Share preview location
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const identifier = '<!-- md2png-preview -->';
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}#artifacts`;
            const body = [
              identifier,
              '## README Preview',
              `The rendered README is available as a [workflow artifact](${runUrl}).`
            ].join('\n');

            const { owner, repo } = context.repo;
            const issue_number = Number(process.env.PR_NUMBER);

            const comments = await github.paginate(
              github.rest.issues.listComments,
              {
                owner,
                repo,
                issue_number,
                per_page: 100,
              }
            );

            const existing = comments.find(comment => comment.body && comment.body.includes(identifier));

            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body,
              });
            }
