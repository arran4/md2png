name: Render documentation assets

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

jobs:
  render-and-refresh:
    name: Render documentation assets
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Render README to PNG
        run: go run ./cmd/md2png -in README.md -out readme.png

      - name: Render light theme example
        run: |
          mkdir -p examples
          go run ./cmd/md2png -in testdata/all_features.md -out examples/light-example.png -theme light

      - name: Render dark theme example
        run: |
          go run ./cmd/md2png -in testdata/all_features.md -out examples/dark-example.png -theme dark

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-assets-${{ github.sha }}
          path: |
            readme.png
            examples/light-example.png
            examples/dark-example.png
          if-no-files-found: error

      - name: Detect asset changes
        id: diff
        run: |
          changed="$(git status --short -- examples/light-example.png examples/dark-example.png readme.png)"
          if [ -n "$changed" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check head branch availability
        id: head-branch
        run: |
          if git ls-remote --exit-code origin "refs/heads/${{ github.head_ref }}"; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "Head branch ${{ github.head_ref }} not found on origin; skipping PR creation."
          fi

      - name: Create update pull request
        if: steps.diff.outputs.changed == 'true' && steps.head-branch.outputs.exists == 'true' && github.event.pull_request.head.repo.full_name == github.repository && !startsWith(github.event.pull_request.head.ref, 'bot/update-doc-images/') && !startsWith(github.event.pull_request.head.ref, 'bot/update-examples/')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update documentation images"
          title: "Update documentation images for #${{ github.event.pull_request.number }}"
          body: |
            Automated documentation image update for PR #${{ github.event.pull_request.number }}.
            This PR refreshes the light and dark theme example renders and the README render so they match the latest Markdown changes.
          branch: bot/update-doc-images/${{ github.head_ref }}
          base: ${{ github.head_ref }}
          add-paths: |
            examples/light-example.png
            examples/dark-example.png
            readme.png
          delete-branch: true

      - name: Share preview location
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const identifier = '<!-- md2png-preview -->';
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}#artifacts`;
            const body = [
              identifier,
              '## Documentation previews',
              `The rendered README and example images are available as [workflow artifacts](${runUrl}).`,
              '',
              '- `readme.png`',
              '- `examples/light-example.png`',
              '- `examples/dark-example.png`',
            ].join('\n');

            const { owner, repo } = context.repo;
            const issue_number = Number(process.env.PR_NUMBER);

            const comments = await github.paginate(
              github.rest.issues.listComments,
              {
                owner,
                repo,
                issue_number,
                per_page: 100,
              }
            );

            const existing = comments.find(comment => comment.body && comment.body.includes(identifier));

            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body,
              });
            }
